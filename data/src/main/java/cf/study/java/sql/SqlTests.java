package cf.study.java.sql;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.hsqldb.jdbc.JDBCDriver;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import java.sql.*;
import java.time.Month;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class SqlTests {
	private final static Logger log = LogManager.getLogger(SqlTests.class);

	private static Connection conn = null;

	public static String toString(ResultSet rs) throws Exception {
		if (rs == null) return null;

		ResultSetMetaData md = rs.getMetaData();
		int colCnt = md.getColumnCount();
		int[] maxWidths = new int[colCnt + 1];
		List<List<String>> valList = new LinkedList<>();

		List<String> headerList = new ArrayList<>();
		headerList.add("");
		for (int i = 1, j = colCnt; i <= j; i++) {
			String val = md.getColumnName(i);
			headerList.add(val);
			maxWidths[i] = val.length();
		}
		valList.add(headerList);

		while (rs.next()) {
			List<String> rowList = new ArrayList<>();
			rowList.add(String.valueOf(rs.getRow()));
			maxWidths[0] = Math.max(maxWidths[0], rowList.get(0).length());
			for (int i = 1, j = colCnt; i <= j; i++) {
				String val = StringUtils.defaultString(rs.getString(i), "");
				rowList.add(val);
				maxWidths[i] = Math.max(maxWidths[i], val.length());
			}
			valList.add(rowList);
		}

		StringBuilder sb = new StringBuilder("\n");
		for (List<String> rowList : valList) {
			for (int i = 0; i <= colCnt; i++) {
				sb.append(StringUtils.rightPad(rowList.get(i), maxWidths[i])).append(" | ");
			}
			sb.append("\n");
		}

		return sb.toString();
	}

	@BeforeClass
	public static void setUpClass() throws Exception {
		Class.forName(JDBCDriver.class.getName());
		conn = DriverManager.getConnection("jdbc:hsqldb:mem:.");
		conn.setAutoCommit(true);

		conn.createStatement().execute("create table test (id integer generated by default as identity primary key, value integer, name varchar(1000))");
		PreparedStatement insert = conn.prepareStatement("insert into test (value, name) values (?, ?)");

		for (Month m : Month.values()) {
			insert.setInt(1, m.getValue());
			insert.setString(2, m.name());
			insert.execute();
		}
	}

	@Test
	public void testTable() throws Exception {
		qp("SELECT * FROM INFORMATION_SCHEMA.TABLES");
		qp("SELECT * FROM INFORMATION_SCHEMA.COLUMNS where TABLE_NAME ='TEST'");
		qp("select * from test");
	}

	@Test
	public void testUnion() throws Exception {
		qp("select * from test union select * from test");
	}

	@Test
	public void testUnionAll() throws Exception {
		qp("select * from test union all select * from test");
	}

	private void qp(String sql, Object... params) throws Exception {
		if (StringUtils.isBlank(sql)) return;
		PreparedStatement pst = conn.prepareStatement(sql);
		for (int i = 0, j = Math.min(pst.getParameterMetaData().getParameterCount(), params.length); i < j; i++) {
			pst.setObject(i + 1, params[i]);
		}
		log.info(toString(pst.executeQuery()));
	}

	@AfterClass
	public static void tearDownClass() throws Exception {
		if (conn != null && !conn.isClosed()) {
			conn.close();
		}
	}
}
